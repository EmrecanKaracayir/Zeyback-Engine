#pragma once

#include "Game/Config/config.hpp"

#include <minwindef.h>
#include <sal.h>
#include <windef.h>
#include <wingdi.h>
#include <winnt.h>
#include <WinUser.h>

// -------------------------< Forward Declarations >------------------------- //
auto WINAPI
WinMain(_In_ HINSTANCE, _In_opt_ HINSTANCE, _In_ LPSTR, _In_ int) -> int;

namespace
{
  // -------------------------< Namespace Aliases >-------------------------- //
  namespace Config = Game::Config;
} // namespace

namespace App
{
  class App
  {
  public:
    /*------------------------------------------------------------------------*\
    *| [public]: Types                                                        |*
    \*------------------------------------------------------------------------*/

    /*------------------------------------------------------------------------*\
    *| [public]: Constructors                                                 |*
    \*------------------------------------------------------------------------*/

    App(const App&) noexcept = delete;
    App(App&&) noexcept      = delete;

    /*------------------------------------------------------------------------*\
    *| [public]: Destructor                                                   |*
    \*------------------------------------------------------------------------*/

    /*------------------------------------------------------------------------*\
    *| [public]: Operators                                                    |*
    \*------------------------------------------------------------------------*/

    auto operator=(const App&) noexcept -> App& = delete;
    auto operator=(App&&) noexcept -> App&      = delete;

    /*------------------------------------------------------------------------*\
    *| [public]: Static methods                                               |*
    \*------------------------------------------------------------------------*/

    /*------------------------------------------------------------------------*\
    *| [public]: Static fields                                                |*
    \*------------------------------------------------------------------------*/

    /*------------------------------------------------------------------------*\
    *| [public]: Methods                                                      |*
    \*------------------------------------------------------------------------*/

    [[nodiscard]]
    auto onCreate(HINSTANCE instance) noexcept -> bool;

    /*------------------------------------------------------------------------*\
    *| [public]: Fields                                                       |*
    \*------------------------------------------------------------------------*/

    /*------------------------------------------------------------------------*\
    *| [public]: Accessors                                                    |*
    \*------------------------------------------------------------------------*/

    /*------------------------------------------------------------------------*\
    *| [public]: Mutators                                                     |*
    \*------------------------------------------------------------------------*/
  protected:
    /*------------------------------------------------------------------------*\
    *| [protected]: Types                                                     |*
    \*------------------------------------------------------------------------*/

    /*------------------------------------------------------------------------*\
    *| [protected]: Constructors                                              |*
    \*------------------------------------------------------------------------*/

    /*------------------------------------------------------------------------*\
    *| [protected]: Destructor                                                |*
    \*------------------------------------------------------------------------*/

    /*------------------------------------------------------------------------*\
    *| [protected]: Operators                                                 |*
    \*------------------------------------------------------------------------*/

    /*------------------------------------------------------------------------*\
    *| [protected]: Static methods                                            |*
    \*------------------------------------------------------------------------*/

    /*------------------------------------------------------------------------*\
    *| [protected]: Static fields                                             |*
    \*------------------------------------------------------------------------*/

    /*------------------------------------------------------------------------*\
    *| [protected]: Methods                                                   |*
    \*------------------------------------------------------------------------*/

    /*------------------------------------------------------------------------*\
    *| [protected]: Fields                                                    |*
    \*------------------------------------------------------------------------*/
  private:
    /*------------------------------------------------------------------------*\
    *| [private]: Types                                                       |*
    \*------------------------------------------------------------------------*/

    /*------------------------------------------------------------------------*\
    *| [private]: Constructors                                                |*
    \*------------------------------------------------------------------------*/

    App() noexcept = default;

    /*------------------------------------------------------------------------*\
    *| [private]: Destructor                                                  |*
    \*------------------------------------------------------------------------*/

    ~App() = default;

    /*------------------------------------------------------------------------*\
    *| [private]: Operators                                                   |*
    \*------------------------------------------------------------------------*/

    /*------------------------------------------------------------------------*\
    *| [private]: Static methods                                              |*
    \*------------------------------------------------------------------------*/

    [[nodiscard]]
    static auto getInstance() noexcept -> App&;
    [[nodiscard]]
    static auto CALLBACK windowProcedure(
      _In_ HWND   window,
      _In_ UINT   message,
      _In_ WPARAM wParam,
      _In_ LPARAM lParam
    ) -> LRESULT;
    [[nodiscard]]
    static auto run() noexcept -> WPARAM;

    /*------------------------------------------------------------------------*\
    *| [private]: Static fields                                               |*
    \*------------------------------------------------------------------------*/

    /*------------------------------------------------------------------------*\
    *| [private]: Methods                                                     |*
    \*------------------------------------------------------------------------*/

    [[nodiscard]]
    auto createWindow(const WNDCLASSEX& windowClass) noexcept -> bool;
    auto changeDisplaySettings(bool custom) -> void;
    auto enterFullscreen() -> void;
    auto exitFullscreen() -> void;

    /*------------------------------------------------------------------------*\
    *| [private]: Fields                                                      |*
    \*------------------------------------------------------------------------*/

    HINSTANCE m_instance{};
    HWND      m_window{};
    HICON     m_appIcon{};
    HCURSOR   m_pointerCursor{};
    DEVMODE   m_deviceMode{};
    bool      m_fullscreen{Config::START_FULLSCREEN};

    /*------------------------------------------------------------------------*\
    *| [private]: Friends                                                     |*
    \*------------------------------------------------------------------------*/

    friend auto WINAPI ::WinMain(
      _In_ HINSTANCE, _In_opt_ HINSTANCE, _In_ LPSTR, _In_ int
    ) -> int;
  };
} // namespace App
